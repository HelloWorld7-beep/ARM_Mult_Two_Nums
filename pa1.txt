

#Subtracts 8 bytes from current value of stack pointer in order to reserve space for integer variable x. Don't need to repeat
# for y because the space allocated on the stack can be "rewritten" when it's time to use it for y
sub sp, sp, 8

#******************************************Get value of x from user and print it********************************************

#Load the user input for x memory address into register x0
ldr x0, = input_x_prompt
#bl = performing a branch jump to the printf funtion, printf is print function call in C
bl printf

#Load instruction that loads memory address into x0, replace previous value?
ldr x0, = input_spec
#Copy the value of the stack pointer, sp, into the register x1. Done to preserve current value of stack pointer
mov x1, sp
#Perform branch jump to scanf function in C
bl scanf
#Loading an 8 byte value from stack pointer xp and storing in register x19. Value loaded is user input for variable x
ldr x19, [sp]

#******************************************Get value of y from user and print it********************************************

#Load memory address into register x0, input y prompt
ldr x0, = input_y_prompt
#bl = performing a branch jump to the printf funtion, printf is print function call in C
bl printf

#Load instruction that loads memory address into x0, replace previous value?
ldr x0, = input_spec
#Copy the value of the stack pointer, sp, into the register x1. Done to preserve current value of stack pointer
mov x1, sp
#Again, perform branch jump to scanf function in C
bl scanf
#Loading 8 byte y value from stack pointer sp register and storing in a different register from x, register x20
ldr x20, [sp]

#*************************************************If-Else Branch****************************************************************

#Add to determine if y is less than zero, get a positive, zero, or neg num. y + 0, > 0 OR < 0 OR = 0
add x1, x20, XZR

#Branch if result is less than 0, aka negative number, jumps to label LESS_THAN_ZERO
b.lt LESS_THAN_ZERO

#Code to execute if b is not less than 0, jumps to the end of the if else code
b LEAVE_BRANCH

#Less than zero branch
LESS_THAN_ZERO: 
    #x = 0 - x
    sub x19, XZR, x19
    #y = 0 - y
    sub x20, XZR, x20

#End of if else statement
LEAVE_BRANCH:

#Set register x5, counter, to 0
mov x5, 0
#Set register x2, final number, to 0
mov x2, 0

#***********************************For Loop "Multiplication"*****************************************************************

#For loop:
LOOP:

    #Compare the counter, x5, to y
    cmp x5, x20
    #When counter is equal to y, exit program
    b.eq exit

    #Add the x-value to the final number
    add x2, x2, x19

    #Increment x5, aka counter
    add x5, x5, 1

    #Go back to the loop start
    b LOOP



#******************************************************Exit************************************************************


#Branch to this label on program completion
exit:
    #Print out result
    #Load the address of the format string. Needs to be x0, not x1? Don't know why
    ldr x0, = result
    #Load the result into x1
    mov x1, x2
    #Print the result
    bl printf

    #Exit
    mov x0, 0
    mov x8, 93
    svc 0
    ret


